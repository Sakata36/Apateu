MIN_MERGE = 32

def insertion_sort(arr, left, right):
    for i in range(left + 1, right + 1):
        key_item = arr[i]
        j = i - 1
        while j >= left and arr[j] > key_item:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key_item
        print(f"Insertion sort step: {arr}")

def merge(arr, left, mid, right):
    merged = []
    i, j = left, mid + 1
    while i <= mid and j <= right:
        if arr[i] <= arr[j]:
            merged.append(arr[i])
            i += 1
        else:
            merged.append(arr[j])
            j += 1
    merged.extend(arr[i:mid + 1])
    merged.extend(arr[j:right + 1])
    arr[left:left + len(merged)] = merged
    print(f"Merging: {arr}")

def tim_sort(arr):
    n = len(arr)
    for start in range(0, n, MIN_MERGE):
        end = min(start + MIN_MERGE - 1, n - 1)
        insertion_sort(arr, start, end)

    size = MIN_MERGE
    while size < n:
        for left in range(0, n, size * 2):
            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))
            if mid < right:
                merge(arr, left, mid, right)
        size *= 2

# Predefined input
arr = [34, 8, 64, 51, 32, 21, 5, 13]  # 8 elements already inputted

print("\nOriginal array:", arr)
tim_sort(arr)
print("\nSorted array:", arr)
